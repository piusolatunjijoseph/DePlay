name: Build and Push Docker images for affected WebApps
run-name: PR By ${{ github.actor }} - ${{ inputs.environment || github.event.pull_request.title }}

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      environment:
        description: 'Please select an environment'
        required: true
        type: choice
        default: stage
        options:
          - stage
          - prod

jobs:
  define-environment:
    name: Define Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ env.environment }}
    steps:
      - name: Set Environment
        run: |
          echo $GITHUB_ENV
          if [ ${{ github.event_name }} == release ]; then
              echo "environment=prod" >> $GITHUB_ENV
              echo "Release to prod"
          elif [ ${{ github.event_name }} == push ]; then
              echo "environment=stage" >> $GITHUB_ENV
              echo "Merge to main, deploy to stage"
          elif [ ${{ github.event_name }} == workflow_dispatch ]; then
              echo "environment=${{ inputs.environment }}" >> $GITHUB_ENV
              echo "Manual deploy to ${{ inputs.environment }}"
          else
              echo "environment=stage" >> $GITHUB_ENV
              echo "Unknown workflow trigger, ${{ github.event_name }}, deploy to stage" 
          fi

  detect-changes:
    runs-on: ubuntu-latest
    needs: [define-environment]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Step 2: List directories matching 'web-*' in /apps folder
      - name: Detect directories in /apps
        id: set-matrix
        run: |
          # Temporarily disable exit on error
          set +e

          if [ ! -d "apps" ]; then
            echo "The /apps folder does not exist."
            ALL_APP_DIRS="[]"
          else
            # Find all new directories matching the pattern `web-*` in /apps
            ALL_APP_DIRS=$(find apps -mindepth 1 -maxdepth 1 -type d -name 'web-*' | sed 's|^apps/||')

            # Convert to JSON array format
            if [ -z "$ALL_APP_DIRS" ]; then
              echo "No matching directories found in /apps."
              ALL_APP_DIRS="[]"
            else
              # Ensure proper JSON formatting using jq
              ALL_APP_DIRS=$(echo "$ALL_APP_DIRS" | jq -R . | jq -s . | tr -d '[:space:]')
            fi
          fi
          
          echo "Detected directories: $ALL_APP_DIRS"
          echo "matrix=$ALL_APP_DIRS" >> "$GITHUB_OUTPUT"

      # Step 3: Detect new directories matching 'web-*' in /apps folder
      - name: Detect new directories matching 'web-*' in /apps
        run: |
          #  Determine base and head commits for diff
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BASE_SHA="${{ github.event.before || github.event.ref }}~1"
            HEAD_SHA="${{ github.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi

          echo "Comparing changes between $BASE_SHA...$HEAD_SHA"

          # Get list of directories in apps/ at BASE commit
          echo "Directories in BASE:"
          git ls-tree -d --name-only "$BASE_SHA" apps/
          BASE_DIRS=$(git ls-tree -d --name-only "$BASE_SHA" apps/)

          # Get list of directories in apps/ at HEAD commit
          echo "Directories in HEAD:"
          git ls-tree -d --name-only "$HEAD_SHA" apps/
          HEAD_DIRS=$(git ls-tree -d --name-only "$HEAD_SHA" apps/)

          # Find new directories (those in HEAD but not in BASE)
          NEW_DIRS=$(comm -13 <(echo "$BASE_DIRS" | sort) <(echo "$HEAD_DIRS" | sort))

          echo "Debug - New directories found:"
          echo "$NEW_DIRS"

          if [ -n "$NEW_DIRS" ]; then
            echo "New directories detected: $NEW_DIRS"
            echo "NEW_DIR=$NEW_DIRS" >> $GITHUB_ENV
            echo "new_dirs=$NEW_DIRS" >> "$GITHUB_OUTPUT"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "No new directories detected."
            echo "new_dirs=" >> "$GITHUB_OUTPUT"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi